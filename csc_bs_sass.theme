<?php

/**
 * @file
 * Functions to support theming in the SASS Starterkit subtheme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\media\Entity\Media;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;
use Drupal\node\NodeInterface;
use Drupal\facets\Result\ResultInterface;

const POSITION_RELATIVE = "position: relative;";


////********* Preprocessing ************////
function csc_bs_sass_preprocess_page(&$variables) {

  // Node pages
  if (array_key_exists('node', $variables) && $variables['node'] instanceof NodeInterface) {
    $node = $variables['node'];
    $pg_type = $node->getType();

    /*if ($pg_type == 'page') {
      kint($variables);
    }*/

    if ($node->hasField('field_class_attribute')) {
      $class = $node->get('field_class_attribute')->value;
      // kint('vars', $variables);
      $variables['content_attributes']->addClass($class);
    }
    if (!empty($node) && $node instanceof \Drupal\node\NodeInterface) {
      $full_width_pages = ['page_full_width', 'landing_page', 'people'];
      if (in_array($pg_type, $full_width_pages)) {
        $variables['container'] = 'container-fluid';
      }
    }
  }
}

function csc_bs_sass_preprocess_node(&$variables) {
  $node = $variables['node'];
  $node_type = $node->bundle();
  // EVENTS
  if ($node_type == 'event') {
    $date = $node->get('field_date');
    $vals = $date->getValue();
    foreach($vals as $n => $val) {
      $stts = $val['value'];
      $etts = $val['end_value'];
      $tz = $val['timezone'];
      $val['allday'] = isDateAllDay($stts, $etts, $tz) ? 'true' : 'false';
      $val['month'] = date('M', $stts);
      $val['day'] = date('j', $stts);
      $val['full'] = date('M j, Y', $stts);
      $vals[$n] = $val;
    }
    $date->setValue($vals);

  // LOCATIONS
  } else if ($node_type == 'location') {
    $short_title = $node->get('field_short_title')->getValue();
    if (empty($short_title)) {
      $title = $node->label();
      $short_title = [
        [
          'value' => $title,
          'format' => 'basic_html',
        ]
      ];
      $node->get('field_short_title')->setValue($short_title);
    }
  // PEOPLE
  } else if ($node_type == 'people') {
    $mid = $node->get('field_image')[0]?->get('target_id')?->getValue();
    if (empty($mid)) {
      $mid = theme_get_setting('default_profile_image');
    }
    $furl = midToUrl($mid, 'people_teaser');
    $variables['image_url'] = $furl;
  // Teasers for Common Pages
  } else if (in_array($node_type, array('page_full_width', 'page', 'landing_page')) && in_array($variables['view_mode'], array('teaser', 'alt_teaser'))) {
    if (empty($variables['title_attributes']['class'])) {
      $variables['title_attributes']['class'] =  array('text-center');
    } else {
      $variables['title_attributes']['class'] = array_merge($variables['title_attributes']['class'], array('text-center'));
    }
    if (empty($variables['content_attributes']['class'])) {
      $variables['content_attributes']['class'] =  array('img-center', 'img-link');
    } else {
      $variables['content_attributes']['class'] = array_merge($variables['content_attributes']['class'], array('img-center', 'img-link'));
    }
  }
}

function csc_bs_sass_preprocess_field(&$variables) {
  // csc_log('vars in pp field: ' . json_encode(array_keys($variables)));
  $fld_name = $variables['field_name'];
  if ($fld_name == 'field_date') {
    $el = $variables['element'];
    // TODO: need to account for multiple dates, event with many different occurrences? If that uses multiple items.
    $dt = $el['#items'][0]->getValue();
    if(array_key_exists('allday', $dt)) {
      $variables['is_allday'] = $dt['allday'];
    }
    if (array_key_exists( 'month', $dt)) {
      $variables['csc_month'] = $dt['month'];
    }
    if (array_key_exists('day', $dt)) {
      $variables['csc_day'] = $dt['day'];
    }
    if (array_key_exists('full', $dt)) {
      $variables['csc_full'] = $dt['full'];
    }
  }
}

/* View Preprocessing */
function csc_bs_sass_preprocess_views_view(&$variables) {
  $view = $variables['view'];
  $viewId = $view->storage->id();
  // Add chosen role facet as a secondary header on the people page
  if ($viewId == 'people') {
    $query_parameters = Drupal::request()->query->all();
    if (!empty($query_parameters['f'])) {
      $role = ucwords(str_replace(array('roles:', '_'), array('', ' '), $query_parameters['f'][0]));
      if (in_array(strtolower($role), ['contemplative instructor', 'intern'])) {
        $role .= 's';
      }
      $variables['header']['area']['#text'] .= "<h3>$role</h3>";
    }
  }
}

function csc_bs_sass_preprocess_views_view_field(&$variables) {
  $view = $variables['view'];
  $field = $variables['field'];
  $view_id = $view->storage->id();
  if ($view_id == 'events') {
    if ($field->field == 'field_tags') {
      $output = [];
      foreach ($view->result as $rid => $row) {
        $tids = $view->field['field_tags']->getValue($row);
        foreach ($tids as $tid) {
          $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($tid);
          $bundle = $term->bundle();
          if($bundle !== 'content_filters') {
            $output[] = "<span class=\"tax-term\"><a href=\"/taxonomy/term/{$tid}\">{$term->label()}</a></span>";
          }
        }
      }
      $variables['output'] = implode('', $output);
    } // end views field tag
  }

  // For homepage events to move the read-more link inside the body's last </p>
  // If Learn More link is created by view, it will necessarily be outside the </p> tag with some space between.
  // If this code is to be used elsewhere, the <a> must have these classes: class="d-inline-block ms-2 lh-1"
  if ($view->storage->id() == 'homepage_events' &&
    $field->field == 'body') {
    // csc_log(str_replace(array('<', '>'), array('&lt;', '&gt;'), $variables['output']));  // For debugging
    $pattern = '/<\/p>\s*(<a[^>]+>[\s\S]+<\/a>)/'; // Looks for an <a> tag outside a </p> with some optional space
    $rep = ' $1</p>'; // Places it inside <p> element
    $variables['output'] = preg_replace($pattern, $rep, $variables['output']);
  }
}

/** End of Views hooks */


function csc_bs_sass_preprocess_block(&$variables) {
  $bid = $variables['elements']['#plugin_id'];
  //csc_log($bid);
  /*
  if ($bid == 'facet_block:roles') {
      csc_log(json_encode($variables['content']), 'notice', '_el_content');
      foreach($variables['elements']['content'][0]['#items'] as &$facet) {
        $label = $facet['#title']['#value'];
        $new_label = str_replace('_', ' ', $label);
        $facet['#title']['#value'] = ucwords($new_label);
      }
  }
  */
}

function csc_bs_sass_preprocess_facets_result_item(&$facet) {
  // csc_log(json_encode([$variables['value'], array_keys($variables)]));
  $label = $facet['value'];
  $new_label = ucwords(str_replace('_', ' ', $label));
  if (in_array($new_label, ['Intern', 'Contemplative Instructor'])) {
    $new_label = $new_label . 's';
  }
  $facet['value'] = $new_label;
  $facet['raw_value'] = $facet['value'];
}


/**
 * Implements custom classes for paragraphs with bundle name
 */
function csc_bs_sass_preprocess_paragraph(&$variables) {
  $para = $variables['paragraph'];
  $pid = "para-" . $para->id();
  $variables['attributes']['class'][] = 'c-csc-' . $para->bundle();
  $variables['attributes']['id'] = $pid;
  // Process text-color and background-color fields adding styles or classes as necessary
  $vnames = array('text', 'bg');
  foreach($vnames as $vnm) {
    $fnm = "field_{$vnm}_color";
    $varnm = "csc_{$vnm}_color";
    $cval = $para->hasField($fnm) ? csc_color_code($para->get($fnm)->value) : '';
    /*if ($vnm === 'bg' && $para->bundle() === "colored_text") {
      kint("bg cval", $cval, $para);
    }*/
    $variables[$varnm] = $cval; // save as variable in case it is needed in templates.
    if (!empty($cval)) {
      if (str_starts_with($cval, '#')) {
        $sattnm = ($vnm === 'bg') ? 'background-color' : 'color';
        $variables['attributes']['style'][] = "$sattnm:$cval;";
      } else {
        $cval = ($vnm === 'bg') ? str_replace('text', 'bg', $cval) : $cval;
        $variables['attributes']['class'][] = strtolower($cval);
      }
    }
  }
  // Use value of field text_box_position to custom size and align a text box (experimental)
  if ($para->hasField('field_text_box_position')) {
    $boxsize = $para->get('field_text_box_position')->value;
    if (!empty($boxsize)) {
      [$width, $height, $top, $left] = explode(',', str_replace(' ', '', $boxsize));
      // kint("box size", $boxsize, $width, $height);
      $top = (mb_substr($top, -1) === '%') ? $top : "{$top}px";
      $left = (mb_substr($left, -1) === '%') ? $left : "{$left}px";
      $variables['attributes']['style'][] = POSITION_RELATIVE;
      $variables['attributes']['style'][] = "width: {$width}px;";
      $variables['attributes']['style'][] = "height: {$height}px;";
      $variables['attributes']['style'][] = "top: $top;";
      $variables['attributes']['style'][] = "left: $left;";
    }
  }

  // Use class attribute field and add to div
  if ($para->hasField('field_class_attribute')) {
    $cattval = $para->get('field_class_attribute')->value;
    if (!empty($cattval)) {
      $variables['attributes']['class'][] = $cattval;
    }
  }
}

/**
 * Implements background image for hero paragraphs
 */
function csc_bs_sass_preprocess_paragraph__hero(&$variables) {
  $para = $variables['paragraph'];
  $node = $para->getParentEntity();
  if (!empty($node) && $node->hasField('field_display_title')) {
    if ($node->getType() == 'landing_page') {
      $display_title = $node->get('field_display_title')->value;
      if ($display_title) {
        /*
        $words = explode(' ', $display_title);
        $words[0] = '<span class="first-word">' . $words[0] . '</span>';
        $variables['title_overlay'] = implode(' ', $words);
        */
        $variables['title_overlay'] = $display_title;
      }
    }
  }

  // Hero Image
  if (!empty($para) && $para->get('field_hero_image')) {
    $mid = $para->get('field_hero_image')[0]?->get('target_id')?->getValue();
    if ($mid) {
      $fid = Media::load($mid)->get('field_media_image')[0]->get('target_id')
        ->getValue();
      $file_url = FILE::load($fid)?->createFileUrl();
      if (!empty($file_url)) {
        $variables['attributes']['style'][] = 'background-image: url("' . $file_url . '");';
      }
    }

    // Setting for background-size and backgroud-repeat
    $size = $para->get('field_background_size');
    if ($size) {
      $size = $size->value;
      if (!empty($size)) {
        if (str_contains($size, ':')) {
          $variables['attributes']['style'][] = $size;
        } else {
          $variables['attributes']['style'][] = "background-size: $size; background-repeat: no-repeat;";
        }
      }
    } else {
      $variables['attributes']['style'][] = 'background-size: cover;';
    }

    // Setting for min-height
    $minhgt = $para->get('field_min_height');
    if ($minhgt) {
      $minhgt = $minhgt->value;
      $variables['attributes']['style'][] = "min-height: $minhgt";
    }
  }
}


/**
 * Implements background image for teaser row paragraphs
 */
function csc_bs_sass_preprocess_paragraph__teaser_row(&$variables) {
  $variables['class'][] = 'container-fluid';
}


function csc_bs_sass_preprocess_paragraph__feature_separator(&$variables) {
  $para = $variables['paragraph'];
  $septype = $para->get('field_separator_type')->value;
  $sepcolor = $para->get('field_separator_color')->value;
  $textcolor = $para->get('field_text_color')->value;
  $variables['attributes']['class'][] = "csc-sep";
  $variables['attributes']['class'][] = "$septype-$sepcolor";
  $variables['attributes']['class'][] = "text-center";
  $variables['attributes']['class'][] = "text-$textcolor";
}

function csc_bs_sass_preprocess_paragraph__skewed_colored_header(&$variables) {
  $para = $variables['paragraph'];
  $variables['color'] = $para->get('field_color')->value;
  $variables['height'] = $para->get('field_height')->value;
  $variables['angle'] = $para->get('field_skew_angle')->value;
  $variables['custom_color'] = $para->get('field_custom_color')->value;
}

/** End of paragraphs **/

/** Utitlity functions */

function csc_color_code($cstr) {
  // kint("in color code function", $cstr);
  if (empty($cstr)) { return ''; }
  if (str_starts_with($cstr, '#') || is_hex_val($cstr)) {
    $cstr = '#' . str_replace('#', '', $cstr); // Make sure there is a hash-sign for custom colors;
  } else {
    $cstr = "text-" . strtolower($cstr);
  }
  return $cstr;
}

function is_hex_val($hstr) {
  $hstr = str_replace('#', '', $hstr);
  $slen = strlen($hstr);
  return (ctype_xdigit($hstr) && ($slen === 3 || $slen === 6 || $slen === 8));
}

function csc_log($msg='no message sent to log function', $ltype='notice', $sufx='') {
  if (strlen($sufx) > 0) { $sufx = " $sufx"; }
  if ($ltype == 'warning') {
    Drupal::logger("csc_bs_sass$sufx")->warning($msg);
  } elseif ($ltype == 'error') {
    Drupal::logger("csc_bs_sass$sufx")->error($msg);
  } else {
    Drupal::logger("csc_bs_sass$sufx")->notice($msg);
  }
}


// Taken from SmartDateTrait
function isDateAllDay($start_ts, $end_ts, $timezone = NULL) {
  if ($timezone) {
    if ($timezone instanceof \DateTimeZone) {
      // If provided as an object, convert to a string.
      $timezone = $timezone->getName();
    }
    // Apply a specific timezone provided.
    $default_tz = date_default_timezone_get();
    date_default_timezone_set($timezone);
  }
  // Format timestamps to predictable format for comparison.
  $temp_start = date('H:i', $start_ts);
  $temp_end = date('H:i', $end_ts);
  if ($timezone) {
    // Revert to previous timezone.
    date_default_timezone_set($default_tz);
  }
  if ($temp_start == '00:00' && $temp_end == '23:59') {
    return TRUE;
  }
  return FALSE;
}

function midToUrl($mid, $style=false) {
  if (!empty($mid)) {
    $fid = Media::load($mid)->get('field_media_image')[0]->get('target_id')
      ->getValue();
    if (!empty($fid)) {
      $file = FILE::load($fid);
      if ($file) {
        if ($style) {
          return ImageStyle::load($style)->buildUrl($file->getFileUri());
        } else {
          return FILE::load($fid)?->createFileUrl();
        }
      }
    }
  }

  return false;
}
